/*In the Add New User page, enter the following details:
First Name & Last Name - It is mandatory to enter the Last Name.
Email - Enter the user's valid email address that is not already used to create a Zoho CRM account.
An invitation will be sent to this email address.
Role- Choose the role of the user in your organization.
Profile - Choose a profile that defines the access rights in CRM account for the user.
You can add other details like phone numbers, address, photo, fax, website, date of birth, language, etc. after adding the user.
user must be employee, if not, give it a dumy id like customer department, verdor part etc

*/
CREATE TABLE 'crm_user'(
	'login_name' varchar(32) PRIMARY KEY,
	'pass_word' char(32),
	'employee_id'	char(36),
	'role_name'	char(10),
	'profile_name' char(10),
	'creator_id' char(36),
	'create_date' DATE NOT NULL,
	FOREIGN KEY(creator_id) REFERENCES employee(employee_id),
	FOREIGN KEY(employee_id) REFERENCES employee(employee_id)
);
INSERT INTO 'crm_user'(login_name, pass_word, employee_id, role_name, profile_name, creator_id, create_date) 
	VALUES("root", "magic", "xxxx", "xxxx1", "xxxx2", "ksjdkfj", "2016/11/21");

CREATE TABLE employee_role(
	'role_name' char(20) PRIMARY KEY,
	'description' char(20)
);
INSERT INTO 'employee_role'(role_name, description) 
	VALUES("CEO", "Manages the whole company");
	

CREATE TABLE employee_profile(
	'profile_name' char(20) PRIMARY KEY,
	'description' char(20)
);
INSERT INTO 'employee_profile'(profile_name, description) 
	VALUES( "database manager", "Manages database daily maintainence");


CREATE TABLE 'company'(
	'company_id' char(36) PRIMARY KEY,
	'name'	varchar(100), 
	'address'	varchar(100), 
	'phone'	varchar(20), 
	'fax'	varchar(20),
	'parent_company' INT,
	'industry_type'	INT, 
	'annual_revenue' float, 
	'currency_id' char(3),
	'credit_limit'	float, 
	'credit_rating'	char(6), 
	'time_zone'	char(3), 
	'payment_terms'	INT);

CREATE TABLE employee(
	'employee_id' char(36) PRIMARY KEY,
	'first_name' char(20), 
	'last_name' char(20), 
	'age' int, 
	'address' varchar(100),
	'mobile_phone' char(20), 
	'office_phone' char(20),  
	'home_phone' char(20), 
	'email' varchar(32),
	'job_title' char(20),
	'department_name' char(20),
	'reports_to' char(36),
	'create_date' DATE,
	'created_by' char(36),
	FOREIGN KEY(job_title) REFERENCES employee_title(title_name),
	FOREIGN KEY(department_name) REFERENCES employee_department(department_name),
	FOREIGN KEY(created_by) REFERENCES employee(employee_id)
);

CREATE TABLE employee_title(
	'title_name' char(20) PRIMARY KEY,
	'description' char(20) NOT NULL
);

INSERT INTO 'employee_title'( title_name, description ) VALUES
( "regular", "without stuff management reponsibilities"),
( "manager", "manages other people");


CREATE TABLE employee_department(
	'department_name' char(20) PRIMARY KEY,
	'description' char(20)
);

INSERT INTO 'employee_department'( department_name, description ) VALUES
( "sales", "selling prodcts"),
( "marketing", "markegint products"),
( "development", "development products");
/*

First Name/Last Name are the first and last names of the contact
Name is the contact's full name, pulled from the first and last name fields
Title refers to the contact's title within the company (e.g. CEO or Accountant)
Phone is usually the contact's primary phone number
Alt phone should be a reliable alternative phone number for the contact
Mobile refers to the contact's cell phone
Pager refers to the contact's pager number, should they have one
Email is the contact's primary email address
Twitter user name can refer to the company Twitter account or the individual contact's account if appropriate (displayed as @username)

Facebook user name can refer to the company Facebook page or the individual contact's profile if appropriate (displayed as facebook.com/username)

LinkedIn public user name can refer to the company's LinkedIn profile or the individual contact's profile if appropriate

Website address usually refers to the website of the contact's company

Notes allows you to take down any pertinent notes about this contact – what you put in that field is up to you!
Contact type refers to whether this is:
the main customer contact (the one associated with a QuickBooks file),

an alternate contact (one associated only with Method), or

a QB contact (one associated with QuickBooks). 
If the contact type field is blank, that means the contact is only associated with Method and can be deleted by using theDelete contact option under More action.


*/

CREATE TABLE customer(
	customer_id  char(36) PRIMARY KEY,
	company_name varchar(100) NOT NULL,
	contact_name varchar(100),
	personal_title char(5),
	first_name char(10),
	last_name char(10),
	phone char(16),
	email char(20),
	street_addr varchar(20),
	city char(20),
	state char(20),
	post_code char(10),
	country char(20),
	bill_addr varchar(50),
	ship_addr varchar(50)
);


CREATE TABLE lead_status(
	'status_name' char(20) PRIMARY KEY,
	'description' varchar(20)
);

INSERT INTO 'lead_status'(status_name )
	VALUES( "qualified"), ( "unqualified"), ( "closed");

CREATE TABLE lead_source(
	'source_name' char(20) PRIMARY KEY,
	'description' varchar(20)
);

INSERT INTO 'lead_source'( source_name )
	VALUES(  "web site"),( "marketing"),
	( "Advertisement"),
	( "Employee Referral"),
	( "Other"),
	( "Partner"),
	( "Public Relations"),
	( "Seminar-internal"),
	( "Seminar-Partner"),
	( "Trade Show"),
	( "Word of mouth");


CREATE TABLE lead_rating(
	'rating_name' char(20) PRIMARY KEY,
	'description' varchar(20)
);


INSERT INTO 'lead_rating'( rating_name )
        VALUES( "high"),("medium");



CREATE TABLE lead(
	lead_id  char(36) PRIMARY KEY,
	company_name varchar(100) NOT NULL,
	contact_name varchar(100),
	personal_title char(5),
	first_name char(10),
	last_name char(10),
	phone char(16),
	email char(20),
	street_addr varchar(20),
	city char(20),
	state char(20),
	post_code char(10),
	country char(20),
	bill_addr varchar(50),
	ship_addr varchar(50),
	lead_source char(20), /*meeting, campaign, etc*/
	lead_status char(20), /*open, unqualified, qualified*/
	lead_rating char(20) /*cold, warm, hot*/
);

/*
Contact type refers to whether this is:
the main customer contact (the one associated),
an alternate contact

Opt out of marketing means the contact will be flagged to not receive marketing mail, emails, or phone calls
Opt out of billing means the contact will be flagged to not receive billing mail, emails, or phone calls
*/

CREATE TABLE 'contact_from'(
	'contact_from' INT PRIMARY KEY,
	'description' varchar(20)
);

INSERT INTO 'contact_from'(contact_from, description)
VALUES(1, "Lead"), (2, "Customer"), (3, "Vendor"), (4, "Employee"), (5, "Other");

CREATE TABLE 'contact'(
	'contact_id' char(36) PRIMARY KEY,
	'status' char(10) DEFAULT "active",
	'first_name' char(20), 
	'last_name' char(20), 
	'contact_from' char(20),
	'address' varchar(100),
	'primary_phone' char(20), 
	'alt_phone' char(20),  
	'mobile_phone' char(20), 
	'fax' char(20),
	'email' varchar(32),
	'twitter' varchar(32),
	'linkedin' varchar(32),
	'facebook' varchar(32),
	'job_title' varchar(32),
	'company_id' char(36) ,
	'when_met' Date, /* NOT NULL,*/
	'where_met' varchar(100),
	'time_zone' char(3),
	'main_contact' char(10),
	'out_of_marketing' char(10),
	'out_of_billing' char(10),
	'extra_info' varchar(200)/*,
	FOREIGN KEY(status) REFERENCES contact_status(status),
	FOREIGN KEY(company_id) REFERENCES company(company_id)*/
);



#activities 
/*metting, to-do, Phone call incoming*/
CREATE TABLE activity_type(
	'activity_type' char(20) PRIMARY KEY,
	'description' nvarchar(50)
);
INSERT INTO 'activity_type'(activity_type ) VAlUES
	( "Email Incoming"),
	( "Email Incoming & Outgoing"),
	( "Email Outgoing"),
	( "Meeting"),	
	( "Phone Callin"),
	( "Phone Callout"),
	( "Other");

CREATE TABLE activity_status(
	'activity_status' char(20) PRIMARY KEY,
	'description' nvarchar(50)
);

INSERT INTO 'activity_status'(activity_status ) VAlUES
	("Not Started"),
	("Cancelled"),
	("Completed"),
	("In Progress"),	
	("Deferred"),
	("Waiting on someone else");

CREATE TABLE 'activity_priority'(
	'activity_priority' char(20) PRIMARY KEY,
	'description' varchar(50)
);

INSERT INTO 'activity_priority'(activity_priority ) VAlUES
	("High"),
	("Medium"),
	("Low");

CREATE TABLE activity(
	'activity_id'  char(36)  PRIMARY KEY,
	'activity_name' varchar(30),
	'activity_type'  char(20), 
	'activity_status' char(20), /**/
	'activity_priority' char(20),	
	'who_preside' char(20),
	'when_created' Date NOT NULL,
	'note'	varchar(100),
	FOREIGN KEY (activity_type)REFERENCES activity_type(activity_type),
	FOREIGN KEY (activity_status) REFERENCES activity_status(activity_status),
	FOREIGN KEY (activity_priority) REFERENCES activity_priority(activity_priority),
	FOREIGN KEY (who_preside)REFERENCES employee(employee_id)
);



/*lead management status*/
CREATE TABLE contact_status(
	'status' char(20) PRIMARY KEY,
	'description' varchar(20),
};

INSERT INTO 'contact_status'(status, description )
	 VALUES( "Not Attempted", "you haven’t tried to reach the lead"),
	 ( "Attempted", "you have tried (person-to-person) to reach the lead"),
	 ( "Contacted", "you have had a person-to-person dialog with the lead"),
	 ( "New Opportunity", "new opportunity identified (convert lead)"),
	 ( "Additional Contact", "new contact at existing opportunity (convert lead)"),
	 ( "Disqualified", "never going to be a prospect for your product or service because this lead is the incorrect industry, company, contact or data");

CREATE TABLE task( 
	'task_id' char(36) PRIMARY KEY,
	'task_name' varchar(60), 
	'due_date' Date NOT NULL,
	'description' varchar(200), 
	'status' varchar(20),
	'assignee' char(36), 
	'assigner' char(36), 
	'creator' char(36),
	CHECK( description IN ("Not Assigned", "Assigned", "Finished", "Revoked"))
);

CREATE TABLE task_status( 
	'status_id' char(20) PRIMARY KEY,
	'description' varchar(20)
);

INSERT INTO 'task_status'(status_id, description) 
	VALUES( 1, "Not Assigned"),(2, "Assigned"), (3, "Finished"), (4, "Revoked");

CREATE TABLE 'product'( 
	'product_id' char(36) PRIMARY KEY,
	'name' varchar(32),
	'price' decimal(6,2),
	'limit' int,
	'product_id' int,
	'active_for_sale' bool
);

CREATE TABLE 'order'( 
	'order_id' char(36) PRIMARY KEY,
	'customer_id' char(36),
	'product_id' char(36),
	'order_amount' decimal(8,2),
	'order_date' date NOT NULL,
	'order_status' char(20)
);

CREATE TABLE 'order_status'( 
	'status_name' char(20) PRIMARY KEY,
	'description' char(30)
);

CREATE TABLE 'cookie'( 
	'session_id' char(36) PRIMARY KEY,
	'user_name' varchar(20),
	'password' varchar(32)
);

CREATE TABLE 'opportunity_pipeline'(
	'pipeline_name' char(20) PRIMARY KEY,
	'description' varchar(100));

INSERT INTO 'opportunity_pipeline'(pipeline_name,  description) VALUES
( "Prospecting", "The first step in locating new opportunities, prospecting means \“testing the waters\” with a potential customer and measuring a level of interest."),
( "Qualification", " This involves evaluating the lead or customer based on a variety of criteria, including how interested they are, how likely they are to purchase, and how long the process might take."),
( "Needs Analysis", " Analyzing needs means determining what the need is in a target company and deciding whether or not your company can fulfill those needs using your product or service."),
( "Value Proposition", " This step involves understanding the relationship between the value of your product or service and the value it represents to a potential or current customer."),
( "Identify Decision Makers", " Identifying decision makers means determining who at a company is the person with the power to make purchasing decisions, and beginning to develop a relationship with them."),
( "Perception Analysis", " This stage involves determining how a customer perceives the services or products you offer; what they expect from your company and the product or service you offer."),
( "Proposal / Price Quote", " This happens later on in the pipeline - quoting a price and creating a proposal happens once the lead is interested enough to pursue this potential, but may want to confirm pricing and compare quotes with other companies."),
( "Negotiation / Review", " This stage happens towards the end of a pipeline; by the negotiation and review stage you should be hammering out the final details of the deal."),
( "Closed" , "either Closed Won or Closed Lost");

CREATE TABLE 'opportunity'(
	'opportunity_id' char(36) PRIMARY KEY,
	'opportunity_name' varchar(50),
	'assign_to'  char(36),
	'contact_id' char(36),
	'creator_id' char(36),
	'close_date' DATE,
	'pipeline' char(20),
	'amount' decimal(8,2),
	'probablity' char(20),
	FOREIGN KEY(assign_to) REFERENCES employee(employee_id),
	FOREIGN KEY(contact_id) REFERENCES contact(contact_id),
	FOREIGN KEY(creator_id) REFERENCES employee(employee_id),
	FOREIGN KEY(pipeline) REFERENCES opportunity_pipeline(pipeline_id)
 );


CREATE TABLE 'campaign_status'(
	'status_name' varchar(20) PRIMARY KEY,
	'description'  varchar(50)
);

INSERT INTO 'campaign_status'(status_id, status_name, description) VALUES
	( "Proposed", "Active"),
	( "Ready", "Active"),
	( "Launched", "Active"),
	( "Completed", "Active"),
	( "Canceled", "Active"),
	( "Suspended", "Active"),
	( "Inactive", "Inactive");
	
CREATE TABLE 'campaign'(
	'campaign_id' char(36) PRIMARY KEY,
	'campaign_name' varchar(50),
	'assign_to'  char(36),
	'campaign_status' char(20),
	'creator_id' char(36),
	'start_date' DATE,
	'close_date' DATE,
	'description' varchar(100),
	FOREIGN KEY(assign_to) REFERENCES employee(employee_id),
	FOREIGN KEY(creator_id) REFERENCES employee(employee_id)
);
	

CREATE TABLE 'case_status'(
	'tatusi_name' char(20) PRIMARY KEY,
	'description' varchar(20)
);

CREATE TABLE 'case_priority'(
	'priority_name' char(20) PRIMARY KEY,
	'description' varchar(20)
);

CREATE TABLE 'case_type'(
	'type_name' char(20) PRIMARY KEY,
	'description' varchar(20)
);

CREATE TABLE 'case_reason'(
	'reason_name' char(20) PRIMARY KEY,
	'description' varchar(20)
);

CREATE TABLE 'case_tbl'(
	'case_id' char(36) PRIMARY KEY,
	'assign_to' char(36),
	'contact' char(36),
	'subject' varchar(100),
	'priority' char(20),
	'case_status' char(20),
	'type' char(20),
	'reason' char(20),
	'last_activity' DATE,
	'next_activity' DATE,
	FOREIGN KEY(assign_to) REFERENCES employee(employee_id),
	FOREIGN KEY(contact) REFERENCES contact(contact_id)
);

CREATE TABLE 'vendor'(
'vendor_id' char(36) PRIMARY KEY,
'account_num' varchar(20),
'contact' char(36),
'company_name' varchar(20),
'credit_rating' char(20),
'vendor_status' char(20), 
'active_flag' char(20),
'web_service_url' varchar(20),
'last_update' date,
FOREIGN KEY(credit_rating) REFERENCES vendor_rate(rate)
);

CREATE TABLE 'vendor_rating'(
rating_name char(20) PRIMARY KEY,
description varchar(20)
);

INSERT INTO 'vendor_rate'(rate_name ) VALUES
( "Superior"),
( "Excellent"),
( "Above average"),
( "Average"),
( "Below average")

CREATE TABLE 'vendor_status'(
status_name char(20) PRIMARY KEY,
description varchar(20)
);

CREATE TABLE 'vendor_flag'(
flag_name char(20) PRIMARY KEY,
description varchar(20)
);

